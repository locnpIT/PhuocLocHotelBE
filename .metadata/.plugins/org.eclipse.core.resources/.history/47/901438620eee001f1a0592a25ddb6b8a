package com.example.phuoclochotel.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.rowset.serial.SerialException;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.phuoclochotel.model.Room;
import com.example.phuoclochotel.response.RoomResponse;
import com.example.phuoclochotel.service.IRoomService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/rooms")
public class RoomController {
	
	private final IRoomService roomService;
	
	public RoomController(IRoomService roomService) {
		this.roomService = roomService;
	}
	
	@PostMapping("/add/new-room")
	public ResponseEntity<RoomResponse> addNewRoom(
			@RequestParam("photo")MultipartFile photo, 
			@RequestParam("roomType") String roomType, 
			@RequestParam("roomPrice") BigDecimal roomPrice) throws SerialException, IOException, SQLException{
		
		Room savedRoom = roomService.addNewRoom(photo, roomType, roomPrice);
	
		RoomResponse response = new RoomResponse(savedRoom.getId(), 
				savedRoom.getRoomType(), savedRoom.getRoomPrice());
		
	
		return ResponseEntity.ok(response);
	}
	
	@GetMapping("/room/types")
	public List<String> getRoomTypes(){
		return roomService.getAllRoomTypes();
	}
	
	
	@GetMapping
	public ResponseEntity<List<RoomResponse>> getAllRoom(){
		List<Room> rooms = roomService.getAllRooms();
		List<RoomResponse> roomResponses = new ArrayList<>();
		for(Room room : rooms) {
			byte[] photoBytes = roomService.getRoomPhotoByRoomId(room.getId());
			if(photoBytes != null && photoBytes.length > 0) {
				String base64Photo = Base64.encodeBase64String(photoBytes);
				RoomResponse roomResponse = getRoomResponse(room);
				roomResponse.setPhoto(base64Photo);
				roomResponse.add(roomResponse);
				
			}
			
 
		}
		return ResponseEntity.ok(roomResponses);
	}

	private RoomResponse getRoomResponse(Room room) {
		// TODO Auto-generated method stub
		return null;
	}

}
